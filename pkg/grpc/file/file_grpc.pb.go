// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	AddFile(ctx context.Context, in *FileAddDTO, opts ...grpc.CallOption) (*FileResponse, error)
	DeleteFile(ctx context.Context, in *FileDeleteDTO, opts ...grpc.CallOption) (*Details, error)
	RenameFile(ctx context.Context, in *FileRenameDTO, opts ...grpc.CallOption) (*FileResponse, error)
	GetFile(ctx context.Context, in *FileGetDTO, opts ...grpc.CallOption) (*FileResponse, error)
	GetAllFilesInFolder(ctx context.Context, in *FileGetAllDTO, opts ...grpc.CallOption) (*FileAllResponse, error)
	GetFileBase64(ctx context.Context, in *FileGetDTO, opts ...grpc.CallOption) (*FileBase64Response, error)
	GetAllFilesInFolderBase64(ctx context.Context, in *FileGetAllDTO, opts ...grpc.CallOption) (*FileAllBase64Response, error)
	GetAllFilesInFolderZip(ctx context.Context, in *FileGetAllDTO, opts ...grpc.CallOption) (*FileAllZipResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) AddFile(ctx context.Context, in *FileAddDTO, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/file_service.FileService/AddFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFile(ctx context.Context, in *FileDeleteDTO, opts ...grpc.CallOption) (*Details, error) {
	out := new(Details)
	err := c.cc.Invoke(ctx, "/file_service.FileService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RenameFile(ctx context.Context, in *FileRenameDTO, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/file_service.FileService/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFile(ctx context.Context, in *FileGetDTO, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/file_service.FileService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetAllFilesInFolder(ctx context.Context, in *FileGetAllDTO, opts ...grpc.CallOption) (*FileAllResponse, error) {
	out := new(FileAllResponse)
	err := c.cc.Invoke(ctx, "/file_service.FileService/GetAllFilesInFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileBase64(ctx context.Context, in *FileGetDTO, opts ...grpc.CallOption) (*FileBase64Response, error) {
	out := new(FileBase64Response)
	err := c.cc.Invoke(ctx, "/file_service.FileService/GetFileBase64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetAllFilesInFolderBase64(ctx context.Context, in *FileGetAllDTO, opts ...grpc.CallOption) (*FileAllBase64Response, error) {
	out := new(FileAllBase64Response)
	err := c.cc.Invoke(ctx, "/file_service.FileService/GetAllFilesInFolderBase64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetAllFilesInFolderZip(ctx context.Context, in *FileGetAllDTO, opts ...grpc.CallOption) (*FileAllZipResponse, error) {
	out := new(FileAllZipResponse)
	err := c.cc.Invoke(ctx, "/file_service.FileService/GetAllFilesInFolderZip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	AddFile(context.Context, *FileAddDTO) (*FileResponse, error)
	DeleteFile(context.Context, *FileDeleteDTO) (*Details, error)
	RenameFile(context.Context, *FileRenameDTO) (*FileResponse, error)
	GetFile(context.Context, *FileGetDTO) (*FileResponse, error)
	GetAllFilesInFolder(context.Context, *FileGetAllDTO) (*FileAllResponse, error)
	GetFileBase64(context.Context, *FileGetDTO) (*FileBase64Response, error)
	GetAllFilesInFolderBase64(context.Context, *FileGetAllDTO) (*FileAllBase64Response, error)
	GetAllFilesInFolderZip(context.Context, *FileGetAllDTO) (*FileAllZipResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) AddFile(context.Context, *FileAddDTO) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedFileServiceServer) DeleteFile(context.Context, *FileDeleteDTO) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServiceServer) RenameFile(context.Context, *FileRenameDTO) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedFileServiceServer) GetFile(context.Context, *FileGetDTO) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileServiceServer) GetAllFilesInFolder(context.Context, *FileGetAllDTO) (*FileAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFilesInFolder not implemented")
}
func (UnimplementedFileServiceServer) GetFileBase64(context.Context, *FileGetDTO) (*FileBase64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileBase64 not implemented")
}
func (UnimplementedFileServiceServer) GetAllFilesInFolderBase64(context.Context, *FileGetAllDTO) (*FileAllBase64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFilesInFolderBase64 not implemented")
}
func (UnimplementedFileServiceServer) GetAllFilesInFolderZip(context.Context, *FileGetAllDTO) (*FileAllZipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFilesInFolderZip not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileAddDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/AddFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AddFile(ctx, req.(*FileAddDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFile(ctx, req.(*FileDeleteDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRenameDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RenameFile(ctx, req.(*FileRenameDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileGetDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFile(ctx, req.(*FileGetDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetAllFilesInFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileGetAllDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetAllFilesInFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/GetAllFilesInFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetAllFilesInFolder(ctx, req.(*FileGetAllDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileBase64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileGetDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileBase64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/GetFileBase64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileBase64(ctx, req.(*FileGetDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetAllFilesInFolderBase64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileGetAllDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetAllFilesInFolderBase64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/GetAllFilesInFolderBase64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetAllFilesInFolderBase64(ctx, req.(*FileGetAllDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetAllFilesInFolderZip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileGetAllDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetAllFilesInFolderZip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileService/GetAllFilesInFolderZip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetAllFilesInFolderZip(ctx, req.(*FileGetAllDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_service.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFile",
			Handler:    _FileService_AddFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileService_DeleteFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _FileService_RenameFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileService_GetFile_Handler,
		},
		{
			MethodName: "GetAllFilesInFolder",
			Handler:    _FileService_GetAllFilesInFolder_Handler,
		},
		{
			MethodName: "GetFileBase64",
			Handler:    _FileService_GetFileBase64_Handler,
		},
		{
			MethodName: "GetAllFilesInFolderBase64",
			Handler:    _FileService_GetAllFilesInFolderBase64_Handler,
		},
		{
			MethodName: "GetAllFilesInFolderZip",
			Handler:    _FileService_GetAllFilesInFolderZip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
